version: 2.1

parameters:
  commit_msg:
    type: string
    default: "<< pipeline.trigger_parameters.github_app.commit_message >>"

jobs:
  security_test:
    docker:
      - image: cimg/base:current
    steps:
      - run:
          name: Install tfsec
          command: |
            curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
      - checkout
      - run:
          name: Use tfsec to test Terraform for vulnerabilities
          command: |
            tfsec ./infrastructure/ -m CRITICAL
  terratest:
    docker:
      - image: cimg/go:1.22
    steps:
      - run:
          name: Install terragrunt and terraform
          command: |
            if [[ $(uname -m) == x86_64 ]]; then export ARCHITECTURE=amd64; else export ARCHITECTURE=arm64; fi
            wget -O terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v0.58.9/terragrunt_linux_$ARCHITECTURE
            chmod u+x terragrunt
            mv terragrunt /home/circleci/bin/terragrunt
            wget -O terraform.zip https://releases.hashicorp.com/terraform/1.8.4/terraform_1.8.4_linux_$ARCHITECTURE.zip
            unzip terraform.zip
            chmod u+x terraform
            mv terraform /home/circleci/bin/terraform
            rm *
            terraform -version
            terragrunt -v
      - checkout
      - run:
          name: Configure test dependencies and run tests
          command: |
            cd ./terratest/test/
            go mod init infra_test
            go mod tidy
            go test -v -timeout 30m
  create_pr:
    docker:
      - image: cimg/base:current
    steps:
      - run:
          name: Installing gh
          command: |
            wget -O gh.tar.gz https://github.com/cli/cli/releases/download/v2.49.2/gh_2.49.2_linux_amd64.tar.gz
            tar -xvf gh.tar.gz
            chmod u+x ./gh_2.49.2_linux_amd64/bin/gh
            mv ./gh_2.49.2_linux_amd64/bin/gh /home/circleci/bin/gh
            gh --version
            rm -r *
      - checkout
      - run:
          name: Configure Git
          command: |
            COMMIT_AUTHOR_NAME=$(git log -1 --pretty=format:'%an')
            COMMIT_AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')
            git config --global user.email "$COMMIT_AUTHOR_EMAIL"
            git config --global user.name "$COMMIT_AUTHOR_NAME"
      - run:
          name: Create pull request
          command: |
            gh repo set-default KinKinoV/webserver-ec2-module-terraform
            gh pr create --title "Automated PR for new tested code" --body "This PR was automatically generated by CircleCI after $COMMIT_AUTHOR_NAME made commit to $CIRCLE_BRANCH branch with create pr tag" --base main --head $CIRCLE_BRANCH

workflows:
  just-test:
    when:
      or:
        - not: 
            # Skipping all [create pr] commits so that testing jobs don't trigger twice
            matches: {pattern: ".*create pr.*", value: << pipeline.parameters.commit_msg >>}
        # Matching main branch with or statement so that "[create pr] ... " commit on main branch still triggers tests
        - equal: [main, << pipeline.git.branch >>]
    jobs:
      - security_test
      - terratest:
          context: AWS
          requires:
            - security_test

# This workflow triggers when commit message has "[create pr]" in it
  test-and-pr:
    when:
      and:
        - matches: {pattern: ".*create pr.*", value: << pipeline.parameters.commit_msg >>}
        - not: 
            equal: [main, << pipeline.git.branch >>]
    jobs:
      - security_test
      - terratest:
          context: AWS
          requires:
            - security_test
      - create_pr:
          context: GitHub_AccessToken
          requires:
            - security_test
            - terratest