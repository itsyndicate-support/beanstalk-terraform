---
version: '2.1'
orbs:
  terraform: circleci/terraform@3.2.0
  tfsec: mycodeself/tfsec@1.1.0
jobs:
  scan-example-env-prod:
    parameters:
    executor: tfsec/default
    steps:
      - checkout
      - tfsec/scan: 
          directory: ./infrastructure
          exclude-checks: 'aws-ec2-require-vpc-flow-logs-for-all-vpcs,aws-ec2-enable-at-rest-encryption,aws-ec2-enforce-http-token-imds,aws-ec2-no-public-egress-sgr,aws-ec2-no-public-ingress-sgr'


  terraform-init-env-prod:
    executor: terraform/default
    steps:
      - checkout
      - run:
          name: terraform init
          path: /root/project/infrastructure
          command: terraform init -var="environment=$FIRST_ENVIRONMENT" -backend-config="key=$FIRST_ENVIRONMENT/terraform.tfstate"


  terraform-validate-env-prod:
    executor: terraform/default
    steps:
      - checkout
      - run:
          name: terraform init
          path: /root/project/infrastructure
          command: terraform init -var="environment=$FIRST_ENVIRONMENT" -backend-config="key=$FIRST_ENVIRONMENT/terraform.tfstate"

      - run:
          name: terraform validate
          path: /root/project/infrastructure
          command: terraform validate


  terraform-plan-env-prod:
    executor: terraform/default
    steps:
      - checkout
      - run:
          name: terraform init
          path: /root/project/infrastructure
          command: terraform init -var="environment=$FIRST_ENVIRONMENT" -backend-config="key=$FIRST_ENVIRONMENT/terraform.tfstate"

      - run:
          name: terraform plan
          path: /root/project/infrastructure
          command: terraform plan -var="environment=$FIRST_ENVIRONMENT"


  terraform-apply-env-prod:
    executor: terraform/default
    steps:
      - checkout
      - run:
          name: terraform init
          path: /root/project/infrastructure
          command: terraform init -var="environment=$FIRST_ENVIRONMENT" -backend-config="key=$FIRST_ENVIRONMENT/terraform.tfstate"

      - run:
          name: terraform apply
          path: /root/project/infrastructure
          command: terraform apply -var="environment=$FIRST_ENVIRONMENT" -auto-approve 


  terraform-destroy-env-prod:
    executor: terraform/default
    steps:
      - checkout
      - run:
          name: terraform init
          path: /root/project/infrastructure
          command: terraform init -backend=true -backend-config="bucket=project-terraform-tfstate" -backend-config="key=$FIRST_ENVIRONMENT/terraform.tfstate" -force-copy -get=true -input=false -var="environment=$FIRST_ENVIRONMENT"

      - run: 
          name: terraform destroy
          path: /root/project/infrastructure
          command: terraform destroy -auto-approve -var="environment=$FIRST_ENVIRONMENT"


  terratest-env-prod:
    docker:
      - image: cimg/go:1.19.4
    steps:
      - checkout

      - run: wget https://releases.hashicorp.com/terraform/1.3.5/terraform_1.3.5_linux_amd64.zip

      - run: sudo unzip terraform_1.3.5_linux_amd64.zip -d /usr/local/bin

      - run: ls -l /usr/local/bin

      - run: terraform -version

      - run: ls -la 

      - run: go mod init mytests
      - run: go mod tidy

      - run: cd /home/circleci/project/infrastructure && terraform init -var="environment=$FIRST_ENVIRONMENT" -backend-config="key=$FIRST_ENVIRONMENT/terraform.tfstate"

      - run:
          name: Run tests
          command: go test -v 
  




workflows:
  deploy_infrastructure-to-prod:
    jobs:

    - scan-example-env-prod:
        filters:
          branches:
            only:
              - main


    - terraform-init-env-prod:
        context: 
          - terraform
        filters:
          branches:
            only:
              - main
        requires:
        - scan-example-env-prod


    - terraform-validate-env-prod:
        context: 
          - terraform
        filters:
          branches:
            only:
              - main
        requires:
        - terraform-init-env-prod


    - terraform-plan-env-prod:
        context: 
          - terraform
        filters:
          branches:
            only:
              - main
        requires:
        - terraform-validate-env-prod


    - approve-plan-env-prod:
        type: approval
        requires:
        - terraform-plan-env-prod


    - terraform-apply-env-prod:
        context: 
          - terraform
        filters:
          branches:
            only:
              - main
        requires:
        - approve-plan-env-prod


    - terratest-env-prod:
        context: 
          - terraform
        filters:
          branches:
            only:
              - main
        requires:
        - terraform-apply-env-prod


    - approve-test-env-prod:
        type: approval
        requires:
        - terratest-env-prod


    - terraform-destroy-env-prod:
        context: 
          - terraform
        filters:
          branches:
            only:
              - main
        requires:
        - approve-test-env-prod


















